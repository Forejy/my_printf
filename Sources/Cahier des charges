Ok      Comprendre le fonctionnement des parametres optionnels
        Calculer le nombre d'arguments opt grace a format
            DOC : Each conversion specification is introduced by the % character
        Determiner le type de chaque argument
        Gerer la precision (Nombre de caractere affiche)
            %6d (print as a decimal integer with a width of at least 6 wide)
            %4f	(print as a floating point with a width of at least 4 wide)


END :
        Changer les messages d'erreurs dans errors.h
-------------------------

LES DIFFERENTS FLAGS DE PRINTF :

ok -s : argument est une chaine de caractere, si pas de modif de longueur
Voir ce que ca fait


ok -S -ls : chaine de caracteres wchar_t* (Wide Character Type == Caractere Etendu)
        -Comment reusir a les afficher : L"chaine"
Voir ce que ca fait

ok -p : adresse de pointeur affiche en hexadecimal

ok -d -i: signed decimal

ok -D - ld -li: signed long

ok -o : signed octal

ok -O -lo : unsigned octal

ok -u : Unsigned int

ok -U -lu : Unsigned long

ok -x : hexa avec les caracteres en minuscule

ok -X -lx: ihexa avec les caracteres en majuscule

ok-c : caractere ascii standard
        -Comment afficher : ''

ok -C -lc: wint_t = caractere ascii etendu
        -Comment afficher : L''


% : un '%' est affiche. (L'argument exact est donc '%%')

# : indique que la valeur doit être convertie en une autre forme. Pour la conversion o le premier caractère de la chaîne de sortie vaudra zéro (en ajoutant un préfixe 0 si ce n'est pas déjà un zéro). Pour les conversions x et X une valeur non nulle reçoit le préfixe « 0x » (ou « 0X » pour l'indicateur X). Pour les conversions a, A, e, E, f, F, g, et G le résultat contiendra toujours un point décimal même si aucun chiffre ne le suit (normalement, un point décimal n'est présent avec ces conversions que si des décimales le suivent). Pour les conversions g et G les zéros en tête ne sont pas éliminés, contrairement au comportement habituel. Pour les autres conversions, cet attribut n'a pas d'effet.

0 : indique le remplissage avec des zéros. Pour les conversions d, i, o, u, x, X, a, A, e, E, f, F, g, et G, la valeur est complétée
 à gauche avec des zéros plutôt qu'avec des espaces. Si les attributs 0 et - apparaissent ensemble, l'attribut 0 est ignoré.
  Si une précision est fournie avec une conversion numérique (d, i, o, u, x, et X), l'attribut 0 est ignoré.
  Pour les autres conversions, le comportement est indéfini.

- : indique que la valeur doit être justifiée sur la limite gauche du champ
 (par défaut elle l'est à droite). Sauf pour la conversion n, les valeurs sont complétées à droite par des espaces, plutôt qu'à gauche par des zéros ou des blancs. Un attribut - surcharge un attribut 0 si les deux sont fournis.
+ : Un signe (+ ou -) doit toujours être imprimé avant un nombre produit par une conversion signée. Par défaut, un signe n'est utilisé que pour des valeurs négatives. Un attribut + surcharge un attribut « espace » si les deux sont fournis.

 (espace)

hh : La conversion entière suivante correspond à un signed char ou unsigned char, ou la conversion n suivante correspond à un argument pointeur sur un signed char.
h : La conversion entière suivante correspond à un short int ou unsigned short int, ou la conversion n suivante correspond à un argument pointeur sur un short int.
l : La conversion entière suivante correspond à un long int ou unsigned long int, ou la conversion n suivante correspond à un pointeur sur un long int, ou la conversion c suivante correspond à un argument wint_t, ou encore la conversion s suivante correspond à un pointeur sur un wchar_t.
ll : La conversion entière suivante correspond à un long long int, ou unsigned long long int, ou la conversion n suivante correspond à un pointeur sur un long long int.
j : La conversion entière suivante correspond à un argument intmax_t ou uintmax_t.
z : La conversion entière suivante correspond à un argument size_t ou ssize_t. (La bibliothèque libc5 de Linux proposait l'argument Z pour cela, ne pas utiliser).
